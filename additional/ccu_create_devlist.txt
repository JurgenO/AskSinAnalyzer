string svDevList = "AskSinAnalyzerDevList";

string HmIPBroadcastName = "HmIP Broadcast";
string HmRFBroadcastName = "HMRF Broadcast";

!Systemvariable anlegen, falls sie nicht bereits existiert
object  svObj     = dom.GetObject(svDevList);
!dom.DeleteObject(svObj);
!dom.RTUpdate(false);

if (!svObj){
  object svObjects = dom.GetObject(ID_SYSTEM_VARIABLES);

  svObj = dom.CreateObject(OT_VARDP);

  svObjects.Add(svObj.ID());

  svObj.Name(svDevList);
  svObj.ValueType(ivtString);
  svObj.ValueSubType(istChar8859);

  svObj.DPInfo("used by AskSinAnalyzer");
  svObj.ValueUnit("");
  svObj.State("");
  svObj.Internal(false);
  svObj.Visible(false);

  dom.RTUpdate(false);
  WriteLine("Variable "#svDevList#" angelegt.\n");
} else {
  WriteLine("Variable "#svDevList#" existiert.\n");
}

!phys. Zentralen-Adresse HmIP auslesen
string stdout;
string stderr;
system.Exec("grep Adapter.1.Address /etc/config/hmip_address.conf|awk -F'\=' {'print $2'}", &stdout, &stderr);
!WriteLine(stdout);

!Hex-Ausgabe in Dezimal umwandeln
string  inHex    = stdout.Trim();

integer inLen    = inHex.Length();
integer outDec   = 0;
if (inLen == 6) {
  integer hexBase = 16;
  
  string i;
  foreach(i, system.GenerateEnum(0,inLen - 1))
  {
    integer idx = i.ToInteger();
    var sChar = inHex.Substr(idx, 1).ToUpper();
    integer sDec = 0;
    if     (sChar == "A") { sDec = 10; }
    elseif (sChar == "B") { sDec = 11; }
    elseif (sChar == "C") { sDec = 12; }
    elseif (sChar == "D") { sDec = 13; }
    elseif (sChar == "E") { sDec = 14; }
    elseif (sChar == "F") { sDec = 15; }
    else   {sDec = sChar.ToInteger();  }

    integer bytePos = idx % 2;
    integer byteIdx  = ((inLen / 2) - 1) - idx / 2;

    outDec = outDec + sDec * hexBase.Pow((byteIdx * 2)+(1-bytePos));
  
    !WriteLine(bytePos#" "#byteIdx# " "#sDec);
  }
}
integer HmIPCentral = outDec;

!alle GerÃ¤teadressen, Seriennummer und Namen erfassen
integer tstamp = system.Date("%F %X").ToTime().ToInteger();
string sDevId;
string data;
string metaData;
string result = "{\"created_at\":"#tstamp#",\"devices\":[{\"address\":15728641,\"serial\":\"00000000000000\",\"name\":\""#HmIPBroadcastName#"\"},{\"address\":0,\"serial\":\"0000000000\",\"name\":\""#HmRFBroadcastName#"\"},";

foreach(sDevId, root.Devices().EnumUsedIDs())
{
  var dev= dom.GetObject(sDevId);
  if ( true == dev.ReadyConfig() )
  {
    metaData = dev.MetaData("DEVDESC");
    foreach (data, metaData.Split(",")) {
      if (data.Substr(0,10) == "RF_ADDRESS") {
        data = data.Replace("RF_ADDRESS:","");
        if (data != "0") {
	  string ser = dev.Address();
	  if ((HmIPCentral > 0) && (data == HmIPCentral)) { ser = "HmIP-RF"; }
          result = result # "{\"address\":" #data#",\"serial\":\""#ser#"\",\"name\":\""#dev.Name()#"\"},";
        }
      }
    }
  }
}
result = result # "]}";
result = result.Replace("},]","}]");


dom.GetObject(ID_SYSTEM_VARIABLES).Get(svDevList).State(result);
Write(result);

!Abfrage im Browser mit http://ccu2:8181/ret.exe?ret=dom.GetObject(ID_SYSTEM_VARIABLES).Get("AskSinAnalyzerDevList").Value()
